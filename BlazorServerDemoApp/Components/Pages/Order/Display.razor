@page "/order/display/{id:int}"
@using BlazorServerDemoApp.Models
@inject IFoodData foodData
@inject IOrderData orderData
@inject NavigationManager navigationManager

@if (isNotFound == true)
{
    <h1>The Order Was Not Found</h1>
}
else if (_order is null)
{
    <h1>Loading . . .</h1>
}
else
{
    <h1>Order Details</h1>

    <table class="table">
        <caption class="visually-hidden">Order Details</caption>
        <tbody>
        <tr>
            <th scope="row"><strong>Ordered By</strong></th>
            <td>@_order.OrderedBy</td>
        </tr>
        <tr>
            <th scope="row"><strong>Ordered On</strong></th>
            <td>
                <time datetime="@_order.Date.ToString("s")">@_order.Date</time>
            </td>
        </tr>
        <tr>
            <th scope="row"><strong>Meal</strong></th>
            <td>@_food.Title</td>
        </tr>
        <tr>
            <th scope="row"><strong>Price</strong></th>
            <td>@_food.Price.ToString("C")</td>
        </tr>
        <tr>
            <th scope="row"><strong>Quantity</strong></th>
            <td>@_order.Quantity</td>
        </tr>
        <tr>
            <th scope="row"><strong>Total</strong></th>
            <td>@_order.Total.ToString("C")</td>
        </tr>
        <tr>
            @if (_confirmDelete is false)
            {
                <td colspan="2">
                    <a class="btn btn-danger" @onclick="() => _confirmDelete=true">
                        Delete
                        Order</a>
                </td>
            }
            else
            {
                <td colspan="2">
                    <a class="btn btn-outline-danger"  @onclick="DeleteOrder">
                        Confirm Delete
                    </a>
                    <a class="btn btn-secondary" @onclick="() => _confirmDelete = false">
                        Cancel
                    </a>
                </td>
            }
        </tr>
        </tbody>
    </table>

    <EditForm Model="_orderUpdate" OnValidSubmit="UpdateOrder">
        <DataAnnotationsValidator/>
        <ValidationSummary Model="_orderUpdate"/>
        
        <div asp-validation-summary="ModelOnly"></div>
        <input name="id" value="@_order.Id" hidden>
        <div>
            <label class="form-label">Ordered By</label>
            <InputText @bind-Value="_orderUpdate.NewName" class="form-control"/>
            <ValidationMessage For="(() => _orderUpdate.NewName)" class="text-danger"></ValidationMessage>
        </div>
        <div>
            <input type="submit" value="Update Client" class="btn btn-primary">
        </div>
    </EditForm>
}

@code {
    [Parameter] public int Id { get; set; }

    private OrderModel _order;
    private FoodModel _food;
    private OrderUpdateModel _orderUpdate;

    private bool isNotFound = false;
    private bool _confirmDelete = false;

    protected override async Task OnInitializedAsync()
    {
        _order = await orderData.GetOrderByIdAsync(Id);

        if (_order is not null)
        {
            var foods = await foodData.GetAllFood();
            _food = foods.First(f => f.Id == _order.FoodId);
            _orderUpdate = new OrderUpdateModel()
            {
                NewName = _order.OrderedBy
            };
        }
        else
        {
            isNotFound = true;
        }
    }

    private async Task DeleteOrder()
    {
        await orderData.DeleteOrder(_order.Id);
        
        navigationManager.NavigateTo("/order/create");
    }

    private async Task UpdateOrder()
    {
        await orderData.UpdateOrderName(_order.Id, _orderUpdate.NewName);
        _order.OrderedBy = _orderUpdate.NewName;
    }
}